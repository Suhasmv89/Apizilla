name: Swagger / OpenAPI Validation (Spectral)
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Spectral CLI
        run: npm install -g @stoplight/spectral

      - name: Run Spectral lint (JSON + SARIF outputs)
        id: spectral_run
        run: |
          PATTERN="./**/openapi*.{yml,yaml,json}"
          echo "Searching for specs with pattern: $PATTERN"
          npx @stoplight/spectral lint $PATTERN -r .spectral.yaml -f json > spectral-output.json || true
          npx @stoplight/spectral lint $PATTERN -r .spectral.yaml -f sarif > spectral.sarif || true
          echo "Spectral outputs written."

      - name: Upload spectral artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spectral-results
          path: |
            spectral-output.json
            spectral.sarif

      - name: Post sticky PR comment with Spectral JSON
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: spectral-output.json

      - name: Fail job if there are Spectral errors (block merge)
        if: always()
        run: |
          if [ -f spectral-output.json ]; then
            ERRORS=$(jq '[.results[] | select(.severity==0)] | length' spectral-output.json)
            if [ "$ERRORS" -gt 0 ]; then
              echo "Found $ERRORS Spectral error(s). Failing job."
              exit 1
            else
              echo "No Spectral errors found (warnings/info may still exist)."
            fi
          else
            echo "No spectral-output.json found; not failing."
          fi

      # Optional: Summarize with LLM (uncomment if you want GPT summaries)
      # - name: Summarize validation with LLM (optional)
      #   if: always() && secrets.OPENAI_API_KEY && secrets.COMPANY_STANDARDS_SNIPPET
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #     COMPANY_SNIPPET: ${{ secrets.COMPANY_STANDARDS_SNIPPET }}
      #   run: |
      #     SPECTRAL_JSON=$(jq -c '.' spectral-output.json)
      #     PROMPT="Company API standards:\n${COMPANY_SNIPPET}\n\nSpectral results:\n${SPECTRAL_JSON}\n\nProvide a short actionable summary for the PR and list the top 5 fixes. Return JSON."
      #     payload=$(jq -n --arg m "$PROMPT" '{model:"gpt-4o-mini",messages:[{role:"user",content:$m}],max_tokens:800}')
      #     response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
      #       -H "Authorization: Bearer $OPENAI_API_KEY" \
      #       -H "Content-Type: application/json" \
      #       -d "$payload")
      #     echo "$response" | jq -r '.choices[0].message.content' > llm_summary.json
      #     gh pr comment ${{ github.event.pull_request.number }} -F llm_summary.json || echo "gh CLI not available; skipping PR comment post."